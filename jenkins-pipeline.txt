pipeline {
    agent any
    tools {
        maven 'maven3'
    }
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }
    stages {
        stage('Git checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Kajjayamsriram/Task-Master-Pro.git'
            }
        }
        stage('complie') {
            steps {
                sh 'mvn compile'
            }
        }
        stage('unit-Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Trivy FS scan') {
            steps {
                sh 'trivy fs --format table -o fs.html .'
            }
        }
        
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''  $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=blogging -Dsonar.projectKey=blogging \
                    -Dsonar.java.binaries=target '''
                }
            }
        }
        stage('Build Application') {
            steps {
                sh 'mvn package'
            }
        }
        stage('Publish Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings-maven', jdk: 'jdk17', maven: 'maven3', traceability: true) {
                        sh 'mvn deploy'
                }
            }
        }
        stage('Docker build and Tag') {
            steps {
                script{
                withDockerRegistry(credentialsId: 'dockerCred', toolName: 'docker') {
                        sh 'docker build -t sriramk16/taskmaster:latest .'
                    }
                }
            }
        }
        stage('Trivy Image scan') {
            steps {
                sh 'trivy image --format table -o image.html sriramk16/taskmaster:latest'
            }
        }
        stage('Push Docker Image') {
            steps {
                script{
                withDockerRegistry(credentialsId: 'dockerCred', toolName: 'docker') {
                        sh 'docker push sriramk16/taskmaster:latest'
                    }
                }
            }
        }
        stage('K8s Deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' blog-cluster', contextName: '', credentialsId: 'k8s-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://F215F65BF29C7EB75F58C53DC3D1C08C.gr7.us-east-1.eks.amazonaws.com') {
                        sh 'kubectl apply -f deployment-service.yml'
                        sleep 35
                    }
            }
        }
        stage('Verify K8s Deploy') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' blog-cluster', contextName: '', credentialsId: 'k8s-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://F215F65BF29C7EB75F58C53DC3D1C08C.gr7.us-east-1.eks.amazonaws.com') {
                        sh 'kubectl get pods -n webapps'
                        sh 'kubectl get svc -n webapps'
                    }
            }
        }
    }
}
